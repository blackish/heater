// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/calendar": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retreives current calendars",
                "parameters": [
                    {
                        "type": "string",
                        "description": "optional calendar id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {}
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "Update or create calendar body should contain JSON with data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "calendar ID",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {}
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "summary": "Delete calendar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "calendar ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {}
                }
            }
        },
        "/defaulttemp": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Get default temperature",
                "responses": {
                    "200": {}
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Set default temperature. Body should contain JSON { TLow: \u003ctlow\u003e, THigh: \u003cthigh\u003e }",
                "responses": {
                    "204": {}
                }
            }
        },
        "/override": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retreives calendar override",
                "responses": {
                    "200": {}
                }
            },
            "put": {
                "produces": [
                    "application/json"
                ],
                "summary": "set calendar override",
                "responses": {
                    "204": {}
                }
            }
        },
        "/sensors": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "summary": "Retrieves current sensors",
                "responses": {
                    "200": {}
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "192.168.1.111",
	BasePath:    "/heaterapi/v1",
	Schemes:     []string{},
	Title:       "Heater REST API",
	Description: "Heater server",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
